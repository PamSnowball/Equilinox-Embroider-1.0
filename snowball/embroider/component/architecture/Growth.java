package com.snowball.embroider.component.architecture;

import com.snowball.embroider.component.NativeComponent;
import com.snowball.embroider.Entity;
import com.snowball.embroider.util.Utils;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class Growth extends NativeComponent {
	public final float time;

	boolean dynamic;

	int sub = 1;

	/**
	 * Constructs the GROWTH component which is used by all living entities to set life cycle. <br>
	 * It is one of the most important components, and it must be implemented very carefully. <br>
	 * Growth time has a standard deviation of fifty percent and, in average, represents a real life year and a half. <p>
	 *
	 * Snowball:<i> There is no need to precise, just make it look like real life, time in equilinox is odd,
	 * some trees live up to ten times longer in real life than at equilinox while there are flowers that live hundreds of times longer at equilinox than in real life. </i>
	 * @param averageGrowthTime average time in game hours that entity grows up.
	 */
	public Growth(float averageGrowthTime) {
		this.time = averageGrowthTime;
		this.dynamic = true;
	}

	/** <b> Animals and non-living entities should never use it. </b> <br> Sub stages are alternative stages of the entity which aren't hardcoded,
	 * but generated by the game.<br> Plants usually have sub-stages as it makes so plants differ from each other*/
	public NativeComponent setSubStages(int subStages) {
		this.sub = Math.max(subStages + 1, 1);
		dynamic = false;
		return this;
	}
	
	public Collection<String> load(Entity entity) {
		List<String> grow = new ArrayList<>();
		
		grow.add(Utils.value("GROWTH;dynamic", dynamic ? 1 : 0, "growthTime", time, "modelStages", entity.getStages()));
		if (!dynamic) grow.add("subStages;" + sub);

		return grow;
	}
	
	@Override
	public int getId() {
		return 42;
	}
}
